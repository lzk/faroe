#include <stdio.h>
#include "macusbio.h"
#include "ScanCMD.h"

int BatchNum = 0;

void _show_err_msg(char *title, int err_code)
{
  printf("%s - error(0x%02x)\n", title, err_code);
  switch(err_code) {
	  case JOB_ID_ERR:
		  printf("JOB_ID_ERR\n");
		  break;

	  case ADF_NOT_READY_ERR:
		  printf("ADF_NOT_READY_ERR\n");
		  break;
	  case DOC_NOT_READY_ERR:
		  printf("DOC_NOT_READY_ERR\n");
		  break;
	  case HOME_NOT_READY_ERR:
		  printf("HOME_NOT_READY_ERR\n");
		  break;
	  case SCAN_JAM_ERR:
		  printf("SCAN_JAM_ERR\n");
		  break;
	  case COVER_OPEN_ERR:
		  printf("COVER_OPEN_ERR\n");
		  break;

  }
}


int _JobCreate(char job)
{
  int JobID = 0;
  U8 cmd[8] = {'J','O','B',0,(U8)job,0,0,0};
  U8 status[8];

  cmd[7] = JOB_PULL_SCAN;

  if(CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
     CMDIO_BulkReadEx(0, status, sizeof(status)) &&
	 (M32(&status[0])==I3('STA')) && (status[4]=='A')) {
     return TRUE;
  }
  else {
    printf("JOB create fail!!");
	return FALSE;
  }
}


//-----------------------------------------------
int _JobEnd()
{
  int result;
  U8 cmd[8] = {'J','O','B',0,'E',0,0,0};
  U8 status[8];

  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
          CMDIO_BulkReadEx(0, status, sizeof(status)) &&
          (M32(&status[0])==I3('STA')) && (status[4]=='A');
  if(result) {
  }
  else {
    printf("Job end fail!!");
  }

  return result;
}
//-----------------------------------------------
int _parameters(SC_PAR_T_ *par)
{
  int result;
  U8 cmd[8]= {'P','A','R',0, 0,0,0,0};
  U8 status[8];

  M16(&cmd[4]) = sizeof(SC_PAR_T_);

  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
          CMDIO_BulkWriteEx(0, par, sizeof(SC_PAR_T_)) &&
          CMDIO_BulkReadEx(0, status, sizeof(status)) &&
          (M32(&status[0])==I3('STA')) && (status[4]=='A');
  return result;
}

//----------------------------------------------
int _MotorParameters(int JobID, int code, MTR_T_ *par)
{
  int result;
  U8 cmd[8]= {'P','A','R',0, 0,0,0,(U8)JobID};
  U8 status[8];

  M16(&cmd[4]) = sizeof(MTR_T_);

  cmd[6] = code;

  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
          CMDIO_BulkWriteEx(0, par, sizeof(MTR_T_)) &&
          CMDIO_BulkReadEx(0, status, sizeof(status)) &&
          (M32(&status[0])==I3('STA')) && (status[4]=='A');
  return result;
}

//-----------------------------------------------
int _StartScan()
{
  int result;
  U8 cmd[8]= {'S','C','A','N', 0,0,0,0};
  U8 status[8];
  BatchNum++;
  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
          CMDIO_BulkReadEx(0, status, sizeof(status)) &&
          (M32(&status[0])==I3('STA')) && (status[4]=='A');
  return result;
}
//-----------------------------------------------
int _stop()
{
  int result;
  U8 cmd[8]= {'S','T','O','P', 0,0,0,0};
  U8 status[8];
  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
          CMDIO_BulkReadEx(0, status, sizeof(status)) &&
          (M32(&status[0])==I3('STA')) && (status[4] =='A');
  return result;
}
//-----------------------------------------------
int _info(SC_INFO_T_ *info)
{
  int result;
  U8 cmd[8]= {'I','N','F','O', sizeof(SC_INFO_T_),0,0,0};
  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
      CMDIO_BulkReadEx(0, info, sizeof(SC_INFO_T_)) &&
      (info->code == I4('IDAT'));
  return result;
}
//-----------------------------------------------
int _cancel()
{
  int result;
  U8 cmd[8]= {'C','A','N','C', 0,0,0,0};
  U8 status[8];
  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
      CMDIO_BulkReadEx(0, status, sizeof(status)) &&
      (M32(&status[0])==I3('STA')) && (M8(&status[4])=='A');
  return result;
}
//-----------------------------------------------
int _imgRead(int dup, U8 *buf, int *length)
{
  int result;
  U8 cmd[8]= {'I','M','G',0, 0,0,0,0};
  //U8 status[8];

  M32(&cmd[4])= *length & 0xffffff;
  cmd[7] = (U8)dup;

  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
          CMDIO_BulkReadEx(0, buf, *length);
  //result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd));
  //      result = CMDIO_BulkReadEx(0, buf, *length);
  return result;
}
//-------------------------------------------------
int _buf(int dup, U8 *buf, int *length)
{
  int result;
  U8 cmd[8]= {'B','U','F',0, 0,0,0,0};
  //U8 status[8];

  M32(&cmd[4])= *length & 0xffffff;
  cmd[7] = (U8)dup;

  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
          CMDIO_BulkReadEx(0, buf, *length);
  return result;
}
//-------------------------------------------------
int _ResetScan(void)
{
  int result;
  U8 cmd[8]= {'R','S','E','T', 0,0,0,0};
  U8 status[8];

  result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
          CMDIO_BulkReadEx(0, status, sizeof(status)) &&
          (M32(&status[0])==I3('STA')) && (status[4]=='A');
  return result;
}

//extern int GammaTransLTCtoGL(unsigned int *pbyRed, unsigned int *pbyGreen, unsigned int *pbyBlue, unsigned int *GLGamma);

//LTC gamma 2.2
unsigned int gGammaData[768] = {
    344653824 ,472323211 ,567876647 ,647242201 ,716318356 ,778185394 ,834678370 ,886911424 ,935671005 ,981612485 ,1025063554 ,1066417433 ,1105936272 ,1143816683 ,1180255277 ,1215383129 ,
    1249331313 ,1282230903 ,1314147437 ,1345146452 ,1375293485 ,1404654073 ,1433359289 ,1461343599 ,1488738074 ,1515477180 ,1541691988 ,1567382500 ,1592614252 ,1617321709 ,1641635942 ,1665491417 ,
    1688953669 ,1712022699 ,1734764043 ,1757112166 ,1779132603 ,1800825355 ,1822190422 ,1843293340 ,1864068574 ,1884647195 ,1904898133 ,1924886922 ,1944679099 ,1964209129 ,1983477011 ,2002548281 ,
    2021422940 ,2040035452 ,2058516888 ,2076736178 ,2094824392 ,2112715996 ,2130410989 ,2147909371 ,2165276678 ,2182447375 ,2199486997 ,2216330009 ,2233041946 ,2249622809 ,2266007062 ,2282325776 ,
    2298447881 ,2314438911 ,2330364403 ,2346093286 ,2361691094 ,2377223364 ,2392559025 ,2407829147 ,2422968196 ,2438041707 ,2452918609 ,2467729972 ,2482475798 ,2497025015 ,2511574229 ,2525926835 ,
    2540279438 ,2554435433 ,2568591425 ,2582616345 ,2596510191 ,2610338499 ,2624101270 ,2637798504 ,2651364665 ,2664865288 ,2678300374 ,2691604387 ,2704908398 ,2718081337 ,2731188738 ,2744230602 ,
    2757141393 ,2770052182 ,2782831899 ,2795611614 ,2808260257 ,2820908898 ,2833426467 ,2845878498 ,2858264992 ,2870651485 ,2882906906 ,2895162325 ,2907286672 ,2919411017 ,2931404290 ,2943397561 ,
    2955325296 ,2967187494 ,2978984155 ,2990715279 ,3002380866 ,3014046452 ,3025646502 ,3037181015 ,3048649991 ,3060053430 ,3071456868 ,3082794770 ,3094067135 ,3105273963 ,3116415254 ,3127556544 ,
    3138632298 ,3149708051 ,3160652732 ,3171597411 ,3182542090 ,3193355697 ,3204169302 ,3214982907 ,3225665440 ,3236347971 ,3247030502 ,3257581961 ,3268133418 ,3278684875 ,3289170796 ,3299591180 ,
    3309946027 ,3320300873 ,3330655719 ,3340945029 ,3351168802 ,3361392574 ,3371550810 ,3381643509 ,3391801743 ,3401828906 ,3411856067 ,3421817692 ,3431779316 ,3441740940 ,3451571492 ,3461467578 ,
    3471232593 ,3481063142 ,3490828156 ,3500527633 ,3510227109 ,3519861049 ,3529494988 ,3539063391 ,3548631793 ,3558134659 ,3567637524 ,3577140389 ,3586577718 ,3595949510 ,3605321301 ,3614693092 ,
    3623999347 ,3633305601 ,3642546319 ,3651787036 ,3661027753 ,3670202934 ,3679378114 ,3688487758 ,3697597401 ,3706641508 ,3715685614 ,3724729720 ,3733708290 ,3742686859 ,3751599892 ,3760512924 ,
    3769425956 ,3778273452 ,3787120947 ,3795968442 ,3804750401 ,3813466823 ,3822248780 ,3830965202 ,3839681623 ,3848332508 ,3856983392 ,3865568740 ,3874219623 ,3882804971 ,3891324782 ,3899844592 ,
    3908364402 ,3916884212 ,3925338486 ,3933792759 ,3942181496 ,3950635768 ,3958958969 ,3967347704 ,3975670904 ,3983994103 ,3992317302 ,4000574965 ,4008832627 ,4017090289 ,4025282415 ,4033474540 ,
    4041666665 ,4049793254 ,4057919842 ,4066046430 ,4074173018 ,4082234070 ,4090295121 ,4098356172 ,4106351687 ,4114347201 ,4122342715 ,4130272693 ,4138268206 ,4146198184 ,4154062625 ,4161992601 ,
    4169857042 ,4177721482 ,4185520386 ,4193384825 ,4201183729 ,4208917096 ,4216715998 ,4224449365 ,4232182731 ,4239916097 ,4247649463 ,4255317293 ,4262985122 ,4270652951 ,4278255244 ,4294967040 ,

    344653824 ,472323211 ,567876647 ,647242201 ,716318356 ,778185394 ,834678370 ,886911424 ,935671005 ,981612485 ,1025063554 ,1066417433 ,1105936272 ,1143816683 ,1180255277 ,1215383129 ,
    1249331313 ,1282230903 ,1314147437 ,1345146452 ,1375293485 ,1404654073 ,1433359289 ,1461343599 ,1488738074 ,1515477180 ,1541691988 ,1567382500 ,1592614252 ,1617321709 ,1641635942 ,1665491417 ,
    1688953669 ,1712022699 ,1734764043 ,1757112166 ,1779132603 ,1800825355 ,1822190422 ,1843293340 ,1864068574 ,1884647195 ,1904898133 ,1924886922 ,1944679099 ,1964209129 ,1983477011 ,2002548281 ,
    2021422940 ,2040035452 ,2058516888 ,2076736178 ,2094824392 ,2112715996 ,2130410989 ,2147909371 ,2165276678 ,2182447375 ,2199486997 ,2216330009 ,2233041946 ,2249622809 ,2266007062 ,2282325776 ,
    2298447881 ,2314438911 ,2330364403 ,2346093286 ,2361691094 ,2377223364 ,2392559025 ,2407829147 ,2422968196 ,2438041707 ,2452918609 ,2467729972 ,2482475798 ,2497025015 ,2511574229 ,2525926835 ,
    2540279438 ,2554435433 ,2568591425 ,2582616345 ,2596510191 ,2610338499 ,2624101270 ,2637798504 ,2651364665 ,2664865288 ,2678300374 ,2691604387 ,2704908398 ,2718081337 ,2731188738 ,2744230602 ,
    2757141393 ,2770052182 ,2782831899 ,2795611614 ,2808260257 ,2820908898 ,2833426467 ,2845878498 ,2858264992 ,2870651485 ,2882906906 ,2895162325 ,2907286672 ,2919411017 ,2931404290 ,2943397561 ,
    2955325296 ,2967187494 ,2978984155 ,2990715279 ,3002380866 ,3014046452 ,3025646502 ,3037181015 ,3048649991 ,3060053430 ,3071456868 ,3082794770 ,3094067135 ,3105273963 ,3116415254 ,3127556544 ,
    3138632298 ,3149708051 ,3160652732 ,3171597411 ,3182542090 ,3193355697 ,3204169302 ,3214982907 ,3225665440 ,3236347971 ,3247030502 ,3257581961 ,3268133418 ,3278684875 ,3289170796 ,3299591180 ,
    3309946027 ,3320300873 ,3330655719 ,3340945029 ,3351168802 ,3361392574 ,3371550810 ,3381643509 ,3391801743 ,3401828906 ,3411856067 ,3421817692 ,3431779316 ,3441740940 ,3451571492 ,3461467578 ,
    3471232593 ,3481063142 ,3490828156 ,3500527633 ,3510227109 ,3519861049 ,3529494988 ,3539063391 ,3548631793 ,3558134659 ,3567637524 ,3577140389 ,3586577718 ,3595949510 ,3605321301 ,3614693092 ,
    3623999347 ,3633305601 ,3642546319 ,3651787036 ,3661027753 ,3670202934 ,3679378114 ,3688487758 ,3697597401 ,3706641508 ,3715685614 ,3724729720 ,3733708290 ,3742686859 ,3751599892 ,3760512924 ,
    3769425956 ,3778273452 ,3787120947 ,3795968442 ,3804750401 ,3813466823 ,3822248780 ,3830965202 ,3839681623 ,3848332508 ,3856983392 ,3865568740 ,3874219623 ,3882804971 ,3891324782 ,3899844592 ,
    3908364402 ,3916884212 ,3925338486 ,3933792759 ,3942181496 ,3950635768 ,3958958969 ,3967347704 ,3975670904 ,3983994103 ,3992317302 ,4000574965 ,4008832627 ,4017090289 ,4025282415 ,4033474540 ,
    4041666665 ,4049793254 ,4057919842 ,4066046430 ,4074173018 ,4082234070 ,4090295121 ,4098356172 ,4106351687 ,4114347201 ,4122342715 ,4130272693 ,4138268206 ,4146198184 ,4154062625 ,4161992601 ,
    4169857042 ,4177721482 ,4185520386 ,4193384825 ,4201183729 ,4208917096 ,4216715998 ,4224449365 ,4232182731 ,4239916097 ,4247649463 ,4255317293 ,4262985122 ,4270652951 ,4278255244 ,4294967040 ,

    344653824 ,472323211 ,567876647 ,647242201 ,716318356 ,778185394 ,834678370 ,886911424 ,935671005 ,981612485 ,1025063554 ,1066417433 ,1105936272 ,1143816683 ,1180255277 ,1215383129 ,
    1249331313 ,1282230903 ,1314147437 ,1345146452 ,1375293485 ,1404654073 ,1433359289 ,1461343599 ,1488738074 ,1515477180 ,1541691988 ,1567382500 ,1592614252 ,1617321709 ,1641635942 ,1665491417 ,
    1688953669 ,1712022699 ,1734764043 ,1757112166 ,1779132603 ,1800825355 ,1822190422 ,1843293340 ,1864068574 ,1884647195 ,1904898133 ,1924886922 ,1944679099 ,1964209129 ,1983477011 ,2002548281 ,
    2021422940 ,2040035452 ,2058516888 ,2076736178 ,2094824392 ,2112715996 ,2130410989 ,2147909371 ,2165276678 ,2182447375 ,2199486997 ,2216330009 ,2233041946 ,2249622809 ,2266007062 ,2282325776 ,
    2298447881 ,2314438911 ,2330364403 ,2346093286 ,2361691094 ,2377223364 ,2392559025 ,2407829147 ,2422968196 ,2438041707 ,2452918609 ,2467729972 ,2482475798 ,2497025015 ,2511574229 ,2525926835 ,
    2540279438 ,2554435433 ,2568591425 ,2582616345 ,2596510191 ,2610338499 ,2624101270 ,2637798504 ,2651364665 ,2664865288 ,2678300374 ,2691604387 ,2704908398 ,2718081337 ,2731188738 ,2744230602 ,
    2757141393 ,2770052182 ,2782831899 ,2795611614 ,2808260257 ,2820908898 ,2833426467 ,2845878498 ,2858264992 ,2870651485 ,2882906906 ,2895162325 ,2907286672 ,2919411017 ,2931404290 ,2943397561 ,
    2955325296 ,2967187494 ,2978984155 ,2990715279 ,3002380866 ,3014046452 ,3025646502 ,3037181015 ,3048649991 ,3060053430 ,3071456868 ,3082794770 ,3094067135 ,3105273963 ,3116415254 ,3127556544 ,
    3138632298 ,3149708051 ,3160652732 ,3171597411 ,3182542090 ,3193355697 ,3204169302 ,3214982907 ,3225665440 ,3236347971 ,3247030502 ,3257581961 ,3268133418 ,3278684875 ,3289170796 ,3299591180 ,
    3309946027 ,3320300873 ,3330655719 ,3340945029 ,3351168802 ,3361392574 ,3371550810 ,3381643509 ,3391801743 ,3401828906 ,3411856067 ,3421817692 ,3431779316 ,3441740940 ,3451571492 ,3461467578 ,
    3471232593 ,3481063142 ,3490828156 ,3500527633 ,3510227109 ,3519861049 ,3529494988 ,3539063391 ,3548631793 ,3558134659 ,3567637524 ,3577140389 ,3586577718 ,3595949510 ,3605321301 ,3614693092 ,
    3623999347 ,3633305601 ,3642546319 ,3651787036 ,3661027753 ,3670202934 ,3679378114 ,3688487758 ,3697597401 ,3706641508 ,3715685614 ,3724729720 ,3733708290 ,3742686859 ,3751599892 ,3760512924 ,
    3769425956 ,3778273452 ,3787120947 ,3795968442 ,3804750401 ,3813466823 ,3822248780 ,3830965202 ,3839681623 ,3848332508 ,3856983392 ,3865568740 ,3874219623 ,3882804971 ,3891324782 ,3899844592 ,
    3908364402 ,3916884212 ,3925338486 ,3933792759 ,3942181496 ,3950635768 ,3958958969 ,3967347704 ,3975670904 ,3983994103 ,3992317302 ,4000574965 ,4008832627 ,4017090289 ,4025282415 ,4033474540 ,
    4041666665 ,4049793254 ,4057919842 ,4066046430 ,4074173018 ,4082234070 ,4090295121 ,4098356172 ,4106351687 ,4114347201 ,4122342715 ,4130272693 ,4138268206 ,4146198184 ,4154062625 ,4161992601 ,
    4169857042 ,4177721482 ,4185520386 ,4193384825 ,4201183729 ,4208917096 ,4216715998 ,4224449365 ,4232182731 ,4239916097 ,4247649463 ,4255317293 ,4262985122 ,4270652951 ,4278255244 ,4294967040
};

int _gamma()
{
	int result;
	U32 size;
	U8 cmd[8]= {'G','A','M','A', 0,0,0,0}; 
	U8 status[8];
	SC_PAR_STA_T_	sc_gamma_status;
	int i, numread;
//	unsigned int gGammaData[768];
	U32 up,down;
	double gamma=-1;
	unsigned int Red[65536];
	unsigned int Green[65536];
	unsigned int Blue[65536];
	unsigned int *pbyRed=Red;
	unsigned int *pbyGreen=Green;
	unsigned int *pbyBlue=Blue;

	
	//unsigned int *gGammaData;	
    /*for(i=0;i<65536;i++){
		Red[i]=(unsigned int)(65536-i); 
		Green[i]=(unsigned int)(65536-i) ;
        Blue[i]=(unsigned int)(65536-i) ;
	}
    */
    //GammaTransLTCtoGL(pbyRed,pbyGreen,pbyBlue,gGammaData);

	 M16(&cmd[4]) = sizeof(gGammaData);

	result = CMDIO_BulkWriteEx(0, cmd, sizeof(cmd)) &&
			CMDIO_BulkWriteEx(0, gGammaData, sizeof(gGammaData)) &&
			CMDIO_BulkReadEx(0, status, sizeof(status)) &&
			(M32(&status[0])==I3('STA')) && (status[4]=='A');
  return result;
}


